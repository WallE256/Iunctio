/** @format */

//Table of Contents:
//  1. Layout Settings
//  2. Colours
//  3. Transitions
//  4. Responsive Font Size
//  5. Mixins/Utility Functions

/******************************************
*           1. Layout Settings            *
******************************************/
//Set z-indices:
$z-indices: (
        "land": (
                "hello-hi": 1,
                "blob": 1,
                "footer": 1,
        ),
        "menu": (
                "overlay": 9,
                "container": 10,
                "items": 10,
                "btn": 10,
        ),
        "proj": (
                "container": 2,
        ),
        "main-content": 1,
        "footer": -1,
        "brand": 10,
        "toPortrait": 15,
);

//Set media query breakpoints:
$mq-breakpts: (
        mobile: 480px,
        tablet: 768px,
        desktop: 992px,
        large-desktop: 1200px,
        wide: 1366px,
        ultrawide: 1536px,
);

/***************************************
*              2. Colours              *
***************************************/
$BLACK_DDD: #181818;
$WHITE: #f8f8f8;
$CREAM: #FACFAD;
$BLUE: #2E86AB;

/***************************************
*            3. Transitions            *
***************************************/
//Bezier Curves:
$ease1: cubic-bezier(0.7, 0, 0.3, 1);
$ease2: cubic-bezier(0.56, 0, 0.265, 1);
$ease3: cubic-bezier(1, 0, 0, 1);
$ease4: cubic-bezier(0.69, 0.88, 0.25, 1.24);
$easeBounce: cubic-bezier(0.2, 1.8, 0.4, 0.8);

/***************************************
*      4. Responsive Sizing            *
***************************************/

$rfs-base-value: 1.25rem !default;
$rfs-unit: rem !default;

@if $rfs-unit != rem and $rfs-unit != px {
    @error "`#{$rfs-unit}` is not a valid unit for $rfs-unit. Use `px` or `rem`.";
}

// Breakpoint at where values start decreasing if screen width is smaller
$rfs-breakpoint: 1200px !default;
$rfs-breakpoint-unit: px !default;

@if $rfs-breakpoint-unit != px and $rfs-breakpoint-unit != em and $rfs-breakpoint-unit != rem {
    @error "`#{$rfs-breakpoint-unit}` is not a valid unit for $rfs-breakpoint-unit. Use `px`, `em` or `rem`.";
}

// Resize values based on screen height and width
$rfs-two-dimensional: false !default;

// Factor of decrease
$rfs-factor: 10 !default;

@if type-of($rfs-factor) != number or $rfs-factor <= 1 {
    @error "`#{$rfs-factor}` is not a valid  $rfs-factor, it must be greater than 1.";
}

// Mode. Possibilities: "min-media-query", "max-media-query"
$rfs-mode: min-media-query !default;

// Generate enable or disable classes. Possibilities: false, "enable" or "disable"
$rfs-class: false !default;

// 1 rem = $rfs-rem-value px
$rfs-rem-value: 16 !default;

// Safari iframe resize bug: https://github.com/twbs/rfs/issues/14
$rfs-safari-iframe-resize-bug-fix: false !default;

// Disable RFS by setting $enable-rfs to false
$enable-rfs: true !default;

// Cache $rfs-base-value unit
$rfs-base-value-unit: unit($rfs-base-value);

// Remove px-unit from $rfs-base-value for calculations
@if $rfs-base-value-unit == px {
    $rfs-base-value: $rfs-base-value / ($rfs-base-value * 0 + 1);
} @else if $rfs-base-value-unit == rem {
    $rfs-base-value: $rfs-base-value / ($rfs-base-value * 0 + 1 / $rfs-rem-value);
}

// Cache $rfs-breakpoint unit to prevent multiple calls
$rfs-breakpoint-unit-cache: unit($rfs-breakpoint);

// Remove unit from $rfs-breakpoint for calculations
@if $rfs-breakpoint-unit-cache == px {
    $rfs-breakpoint: $rfs-breakpoint / ($rfs-breakpoint * 0 + 1);
} @else if $rfs-breakpoint-unit-cache == rem or $rfs-breakpoint-unit-cache == "em" {
    $rfs-breakpoint: $rfs-breakpoint / ($rfs-breakpoint * 0 + 1 / $rfs-rem-value);
}

// Calculate the media query value
$rfs-mq-value: if(
                $rfs-breakpoint-unit == px,
                #{$rfs-breakpoint}px,
                #{$rfs-breakpoint / $rfs-rem-value}#{$rfs-breakpoint-unit}
);
$rfs-mq-property-width: if($rfs-mode == max-media-query, max-width, min-width);
$rfs-mq-property-height: if($rfs-mode == max-media-query, max-height, min-height);

// Internal mixin used to determine which media query needs to be used
@mixin _rfs-media-query {
    @if $rfs-two-dimensional {
        @if $rfs-mode == max-media-query {
            @media (#{$rfs-mq-property-width}: #{$rfs-mq-value}), (#{$rfs-mq-property-height}: #{$rfs-mq-value}) {
                @content;
            }
        } @else {
            @media (#{$rfs-mq-property-width}: #{$rfs-mq-value}) and (#{$rfs-mq-property-height}: #{$rfs-mq-value}) {
                @content;
            }
        }
    } @else {
        @media (#{$rfs-mq-property-width}: #{$rfs-mq-value}) {
            @content;
        }
    }
}

// Internal mixin that adds disable classes to the selector if needed.
@mixin _rfs-rule {
    @if $rfs-class == disable and $rfs-mode == max-media-query {
        // Adding an extra class increases specificity, which prevents the media query to override the property
        &,
        .disable-rfs &,
        &.disable-rfs {
            @content;
        }
    } @else if $rfs-class == enable and $rfs-mode == min-media-query {
        .enable-rfs &,
        &.enable-rfs {
            @content;
        }
    } @else {
        @content;
    }
}

// Internal mixin that adds enable classes to the selector if needed.
@mixin _rfs-media-query-rule {
    @if $rfs-class == enable {
        @if $rfs-mode == min-media-query {
            @content;
        }

        @include _rfs-media-query {
            .enable-rfs &,
            &.enable-rfs {
                @content;
            }
        }
    } @else {
        @if $rfs-class == disable and $rfs-mode == min-media-query {
            .disable-rfs &,
            &.disable-rfs {
                @content;
            }
        }
        @include _rfs-media-query {
            @content;
        }
    }
}

// Helper function to get the formatted non-responsive value
@function rfs-value($values) {
    // Convert to list
    $values: if(type-of($values) != list, ($values), $values);

    $val: "";

    // Loop over each value and calculate value
    @each $value in $values {
        @if $value == 0 {
            $val: $val + " 0";
        } @else {
            // Cache $value unit
            $unit: if(type-of($value) == "number", unit($value), false);

            @if $unit == px {
                // Convert to rem if needed
                $val: $val +
                    " " +
                    if($rfs-unit == rem, #{$value / ($value * 0 + $rfs-rem-value)}rem, $value);
            } @else if $unit == rem {
                // Convert to px if needed
                $val: $val +
                    " " +
                    if($rfs-unit == px, #{$value / ($value * 0 + 1) * $rfs-rem-value}px, $value);
            } @else {
                // If $value isn't a number (like inherit) or $value has a unit (not px or rem, like 1.5em) or $ is 0, just print the value
                $val: $val + " " + $value;
            }
        }
    }

    // Remove first space
    @return unquote(str-slice($val, 2));
}

// Helper function to get the responsive value calculated by RFS
@function rfs-fluid-value($values) {
    // Convert to list
    $values: if(type-of($values) != list, ($values), $values);

    $val: "";

    // Loop over each value and calculate value
    @each $value in $values {
        @if $value == 0 {
            $val: $val + " 0";
        } @else {
            // Cache $value unit
            $unit: if(type-of($value) == "number", unit($value), false);

            // If $value isn't a number (like inherit) or $value has a unit (not px or rem, like 1.5em) or $ is 0, just print the value
            @if not $unit or $unit != px and $unit != rem {
                $val: $val + " " + $value;
            } @else {
                // Remove unit from $value for calculations
                $value: $value / ($value * 0 + if($unit == px, 1, 1 / $rfs-rem-value));

                // Only add the media query if the value is greater than the minimum value
                @if abs($value) <= $rfs-base-value or not $enable-rfs {
                    $val: $val +
                        " " +
                        if($rfs-unit == rem, #{$value / $rfs-rem-value}rem, #{$value}px);
                } @else {
                    // Calculate the minimum value
                    $value-min: $rfs-base-value + (abs($value) - $rfs-base-value) / $rfs-factor;

                    // Calculate difference between $value and the minimum value
                    $value-diff: abs($value) - $value-min;

                    // Base value formatting
                    $min-width: if(
                                    $rfs-unit == rem,
                                    #{$value-min / $rfs-rem-value}rem,
                                    #{$value-min}px
                    );

                    // Use negative value if needed
                    $min-width: if($value < 0, -$min-width, $min-width);

                    // Use `vmin` if two-dimensional is enabled
                    $variable-unit: if($rfs-two-dimensional, vmin, vw);

                    // Calculate the variable width between 0 and $rfs-breakpoint
                    $variable-width: #{$value-diff * 100 / $rfs-breakpoint}#{$variable-unit};

                    // Return the calculated value
                    $val: $val +
                        " calc(" +
                        $min-width +
                        if($value < 0, " - ", " + ") +
                        $variable-width +
                        ")";
                }
            }
        }
    }

    // Remove first space
    @return unquote(str-slice($val, 2));
}

// RFS mixin
@mixin rfs($values, $property: font-size, $two-d: false) {
    @if $two-d {
        $rfs-two-dimensional: $two-d !global;
    }
    @if $values != null {
        $val: rfs-value($values);
        $fluidVal: rfs-fluid-value($values);

        // Do not print the media query if responsive & non-responsive values are the same
        @if $val == $fluidVal {
            #{$property}: $val;
        } @else {
            @include _rfs-rule {
                #{$property}: if($rfs-mode == max-media-query, $val, $fluidVal);

                // Include safari iframe resize fix if needed
                min-width: if($rfs-safari-iframe-resize-bug-fix, (0 * 1vw), null);
            }

            @include _rfs-media-query-rule {
                #{$property}: if($rfs-mode == max-media-query, $fluidVal, $val);
            }
        }
    }
    @if $two-d {
        $rfs-two-dimensional: not $two-d !global;
    }
}

// Shorthand helper mixins
@mixin font-size($value) {
    @include rfs($value);
}

@mixin padding($value) {
    @include rfs($value, padding);
}

@mixin padding-top($value) {
    @include rfs($value, padding-top);
}

@mixin padding-right($value) {
    @include rfs($value, padding-right);
}

@mixin padding-bottom($value) {
    @include rfs($value, padding-bottom);
}

@mixin padding-left($value) {
    @include rfs($value, padding-left);
}

@mixin margin($value) {
    @include rfs($value, margin);
}

@mixin margin-top($value) {
    @include rfs($value, margin-top);
}

@mixin margin-right($value) {
    @include rfs($value, margin-right);
}

@mixin margin-bottom($value) {
    @include rfs($value, margin-bottom);
}

@mixin margin-left($value) {
    @include rfs($value, margin-left);
}

/***************************************
*       5. Mixins & UtilityFuncs       *
***************************************/
//Include font-faces.
$font-weights: (
        "Thin": 100,
        "Ultralight": 200,
        "Light": 300,
        "Regular": 400,
        "Medium": 500,
        "Semibold": 600,
        "Bold": 700,
        "Extrabold": 800,
        "Black": 900,
);
@mixin font-face($name, $weight: "Regular", $style: "") {
    @font-face {
        font-family: quote($name);
        // The path ../assets/fonts/ is relative to *.min.css
        $path: "/fonts/#{$name}-#{$weight}#{$style}.woff2";
        src: url($path) format("woff2");
        font-weight: map-get($font-weights, $weight);
        @if $style!= "" {
            font-style: $style;
        }
    }
}

//Set dimensions of elements:
@mixin setSize($width, $height: $width, $unit: px, $rfs-w: false, $rfs-h: false, $two-d: false) {
    @if unitless($width) or unitless($height) {
        $width: getUnit($width, $unit);
        $height: getUnit($height, $unit);
    }
    @if $rfs-w {
        @include rfs($width, width, $two-d);
    } @else {
        width: $width;
    }
    @if $rfs-h {
        @include rfs($height, height, $two-d);
    } @else {
        height: $height;
    }
}

//Return z-index values based on z-index map:
@function ind($name, $layer: false) {
    @if map-has-key($z-indices, $name) {
        $index: map-get($z-indices, $name);
        @if $layer {
            @if map-has-key($index, $layer) {
                $index: map-get($index, $layer);
            } @else {
                @warn 'The layer "#{$layer}" is not defined defined within "#{$name}"';
            }
        }
        @return $index;
    } @else {
        @warn "The value "#{$name}" not defined within Z-index map";
    }
}

//Media Queries:
@function get-mq-breakpts($name, $breakpoints: $mq-breakpts) {
    @if map-has-key($breakpoints, $name) {
        @return map-get($breakpoints, $name);
    } @else {
        @warn "Breakpoint #{$name} not defined.";
    }
}
@mixin media(
    $from: false,
    $until: false,
    $to: false,
    $and: false,
    $media-type: all,
    $breakpoints: $mq-breakpts,
    $unit: px
) {
    $min-width: 0;
    $max-width: 0;
    $query: "";

    //FROM: this breakpoint (inclusive)
    @if $from {
        @if type-of($from) == number {
            @if unitless($from) {
                $from: getUnit($from, $unit);
            }
            $min-width: $from;
        } @else {
            $min-width: get-mq-breakpts($from);
        }
    }

    @if $until and $to {
        @warn "Using $until and $to together may cause unexpected behavior. Here, $to will take higher priority.";
    }

    //UNTIL: this breakpoint (exclusive)
    @if $until {
        @if type-of($until) == number {
            @if unitless($until) {
                $until: getUnit($until, $unit);
            }
            $max-width: $until;
        } @else {
            $max-width: get-mq-breakpts($until) - 1px;
        }
    }

    //TO: this breakpoint (inclusive)
    @if $to {
        @if type-of($to) == number {
            @if unitless($to) {
                $to: getUnit($to, $unit);
            }
            $max-width: $to;
        } @else {
            $max-width: get-mq-breakpts($to);
        }
    }

    @if $min-width != 0 {
        $query: "#{$query} and (min-width: #{$min-width})";
    }
    @if $max-width != 0 {
        $query: "#{$query} and (max-width: #{$max-width})";
    }
    @if $and {
        $query: "#{$query} and (#{$and})";
    }

    @if ($media-type == "all" and $query != "") {
        $media-type: "";
        $query: str-slice(unquote($query), 6);
    }

    @media #{$media-type + $query} {
        @content;
    }
}

//Toggle Visibility
@mixin fadeView($type) {
    @if $type== "hide" {
        visibility: hidden;
        opacity: 0;
        transition: visibility 1s, opacity 1s;
    } @else if $type == "show" {
        visibility: visible;
        opacity: 1;
        transition: visibility 1s, opacity 1s;
    }
}

//Position element:
@mixin pos($type: absolute, $args: 0 0 0 0, $trf: 0 0, $unit: "%") {
    position: $type;
    $offsets: top right bottom left;
    @if length($args) == 2 or length($args) == 4 {
        @if length($args) == 2 {
            $args: join($args, $args);
        }
        @each $offset in $offsets {
            $offsetVal: nth($args, index($offsets, $offset));
            #{$offset}: validOffset($offsetVal, $unit);
        }
    } @else {
        @warn "Invalid number of arguments. (Must be either 2 or 4).";
    }
    @if trf != 0 {
    $X: nth($trf, 1);
    $Y: nth($trf, 2);
    //If neither of X and Y is zero
    @if type-of($X) == number and type-of($Y) == number {
        $X: getUnit($X, $unit);
        $Y: getUnit($Y, $unit);
        @if ($X * $Y) !=0 {
            transform: translate($X, $Y);
        } @else if ($X != 0) {
            transform: translateX($X);
        } @else if ($Y != 0) {
            transform: translateY($Y);
        }
    } @else {
        @warn "Invalid value for $trf";
    }
}
}

@function validOffset($value, $unit: "%") {
    @if type-of($value) == number {
        @if ($value != 0) {
            @return getUnit($value, $unit);
        } @else {
            @return null;
        }
    } @else if str-slice($value, 1, 1) == "f" {
        @return str-slice($value, 2);
    } @else if index(auto initial inherit, $value) {
        @return $value;
    } @else {
        @warn "Invalid offset value.";
        @return null;
    }
}
@mixin abs($args: 0 0 0 0, $trf: 0 0, $unit: "%") {
    @include pos(absolute, $args, $trf, $unit);
}
@mixin rel($args: 0 0 0 0, $trf: 0 0, $unit: "%") {
    @include pos(relative, $args, $trf, $unit);
}
@mixin fix($args: 0 0 0 0, $trf: 0 0, $unit: "%") {
    @include pos(fixed, $args, $trf, $unit);
}
@mixin sticky($args: 0 0 0 0, $trf: 0 0, $unit: "%") {
    @include pos(sticky, $args, $trf, $unit);
}

//endsWith function for strings:
@function str-endsWith($string, $find) {
    @return str-length($string) >= str-length($find) AND
        str-slice($string, (str-length($string) - str-length($find) + 1)) == $find;
}

//reverse strings:
@function str-reverse($string) {
    $reverse-string: "";
    @for $i from 1 through str-length($string) {
        $c: str-slice($string, $i, $i);
        $reverse-string: "#{$c}#{$reverse-string}";
    }
    @return $reverse-string;
}

//split strings on separator:
@function str-split($string, $separator) {
    $i: str-index($string, $separator);
    @if $i != null {
        @return append(
                        str-slice($string, 1, $i - 1),
                        str-split(str-slice($string, $i + str-length($separator)), $separator)
        );
    }
    @return $string;
}

//Add unit to unitless number
@function getUnit($number, $unit) {
    $std_units: "px" "cm" "mm" "%" "in" "em" "rem" "pt" "vw" "vh" "vmin" "vmax";
    $std_unit_values: 1px 1cm 1mm 1% 1in 1em 1rem 1pt 1vw 1vh 1vmin 1vmax;
    @if type-of($number) == number {
        @if not unitless($number) {
            @return $number;
        } @else {
            $index: index($std_units, $unit);
            @if $index {
                @return $number * nth($std_unit_values, $index);
            } @else {
                @warn "Unknown unit `#{$unit}`.";
                @return $number;
            }
        }
    } @else {
        @warn "Invalid type.";
        @return $number;
    }
}

//Transition:
@mixin transition($prop, $time, $easing: $ease1, $delay: 0s) {
    $transition: ();
    @for $i from 1 through length($prop) {
        @for $j from 0 to (length($prop)) - (length($time)) {
            $time: join($time, nth($time, -1));
        }
        @for $j from 0 to (length($prop)) - (length($easing)) {
            $easing: join($easing, nth($easing, -1));
        }
        @for $j from 0 to (length($prop)) - (length($delay)) {
            $delay: join($delay, nth($delay, -1));
        }

        $transition: append(
                        $transition,
                                (nth($prop, $i) nth($time, $i) nth($easing, $i) nth($delay, $i)),
                $separator: comma
        );
    }
    transition: $transition;
}

//Selector for styling on parent hover:
@mixin nthParentHover($n: 1, $focus_active: false) {
    $rootString: str-reverse(#{&});
    $parentIndex: str-index($rootString, " ");
    $parent: str_slice($rootString, 0, $parentIndex - 1);
    $children: str_slice($rootString, $parentIndex);

    @if $focus_active {
        @at-root #{$parent}:hover #{$children},
        #{$parent}:focus #{$children},
        #{$parent}:active #{$children} {
            @content;
        }
    } @else {
        @at-root #{$parent}:hover #{$children} {
            @content;
        }
    }
}

//Use font
@mixin font($name, $weight: "Regular", $size: 1rem, $style: false) {
    font-family: quote($name);
    font-weight: map-get($font-weights, $weight);
    @include font-size($size);
    @if $style {
        font-style: unquote($style);
    }
}
