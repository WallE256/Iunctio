/** @format */

//Table of Contents:
//  1. Layout Settings
//  2. Colours
//  3. Transitions
//  4. Mixins/Utility Functions

/******************************************
*           1. Layout Settings            *
******************************************/
//Set z-indices:
$z-indices: (
  "home": (
    "title": 2,
    "subtitle": 2
  ),
  "user-manual": 3,
  "blobs": (
    "green": 0,
    "red": 0,
    "blue": 1,
  ),
  "nav-bar": 10,
);

//Set media query breakpoints:
$mq-breakpts: (
  mobile: 480px,
  tablet: 768px,
  desktop: 992px,
  large-desktop: 1200px,
  wide: 1366px,
  ultrawide: 1536px,
);

/***************************************
*              2. Colours              *
***************************************/
$BLACK_DDD: #181818;
$BLACK_DD: #2f2f2f;
$BLACK_L: #3c3c3c;
$WHITE: #ffffff;
$WHITE_D: #f8f8f8;
$CREAM: #DCBE90;
$BLUE: #8AB6D6;

/***************************************
*            3. Transitions            *
***************************************/
//Bezier Curves:
$ease1: cubic-bezier(0.7, 0, 0.3, 1);
$ease2: cubic-bezier(0.56, 0, 0.265, 1);
$ease3: cubic-bezier(1, 0, 0, 1);
$ease4: cubic-bezier(0.69, 0.88, 0.25, 1.24);
$easeBounce: cubic-bezier(0.2, 1.8, 0.4, 0.8);

/***************************************
*       4. Mixins & UtilityFuncs       *
***************************************/
@import "~rfs/scss";

//Include font-faces.
$font-weights: (
  "Thin": 100,
  "Ultralight": 200,
  "Light": 300,
  "Regular": 400,
  "Medium": 500,
  "Semibold": 600,
  "Bold": 700,
  "Extrabold": 800,
  "Black": 900,
);
@mixin font-face($name, $weight: "Regular", $style: "") {
  @font-face {
    font-family: quote($name);
    $path: "/fonts/#{$name}-#{$weight}#{$style}.woff2";
    src: url($path) format("woff2");
    font-weight: map-get($font-weights, $weight);
    @if $style!= "" {
      font-style: $style;
    }
  }
}

//Set dimensions of elements:
@mixin setSize($width, $height: $width, $unit: px, $rfs-w: false, $rfs-h: false, $two-d: false) {
  @if unitless($width) or unitless($height) {
    $width: getUnit($width, $unit);
    $height: getUnit($height, $unit);
  }
  @if $rfs-w {
    @include rfs($width, width, $two-d);
  } @else {
    width: $width;
  }
  @if $rfs-h {
    @include rfs($height, height, $two-d);
  } @else {
    height: $height;
  }
}

//Return z-index values based on z-index map:
@function ind($name, $layer: false) {
  @if map-has-key($z-indices, $name) {
    $index: map-get($z-indices, $name);
    @if $layer {
      @if map-has-key($index, $layer) {
        $index: map-get($index, $layer);
      } @else {
        @warn 'The layer "#{$layer}" is not defined defined within "#{$name}"';
      }
    }
    @return $index;
  } @else {
    @warn "The value "#{$name}" not defined within Z-index map";
  }
}

//Media Queries:
@function get-mq-breakpts($name, $breakpoints: $mq-breakpts) {
  @if map-has-key($breakpoints, $name) {
    @return map-get($breakpoints, $name);
  } @else {
    @warn "Breakpoint #{$name} not defined.";
  }
}

@mixin media(
  $from: false,
  $until: false,
  $to: false,
  $and: false,
  $media-type: all,
  $breakpoints: $mq-breakpts,
  $unit: px
) {
  $min-width: 0;
  $max-width: 0;
  $query: "";

  //FROM: this breakpoint (inclusive)
  @if $from {
    @if type-of($from) == number {
      @if unitless($from) {
        $from: getUnit($from, $unit);
      }
      $min-width: $from;
    } @else {
      $min-width: get-mq-breakpts($from);
    }
  }

  @if $until and $to {
    @warn "Using $until and $to together may cause unexpected behavior. Here, $to will take higher priority.";
  }

  //UNTIL: this breakpoint (exclusive)
  @if $until {
    @if type-of($until) == number {
      @if unitless($until) {
        $until: getUnit($until, $unit);
      }
      $max-width: $until;
    } @else {
      $max-width: get-mq-breakpts($until) - 1px;
    }
  }

  //TO: this breakpoint (inclusive)
  @if $to {
    @if type-of($to) == number {
      @if unitless($to) {
        $to: getUnit($to, $unit);
      }
      $max-width: $to;
    } @else {
      $max-width: get-mq-breakpts($to);
    }
  }

  @if $min-width != 0 {
    $query: "#{$query} and (min-width: #{$min-width})";
  }
  @if $max-width != 0 {
    $query: "#{$query} and (max-width: #{$max-width})";
  }
  @if $and {
    $query: "#{$query} and (#{$and})";
  }

  @if ($media-type == "all" and $query != "") {
    $media-type: "";
    $query: str-slice(unquote($query), 6);
  }

  @media #{$media-type + $query} {
    @content;
  }
}

//Toggle Visibility
@mixin fadeView($type) {
  @if $type== "hide" {
    visibility: hidden;
    opacity: 0;
    transition: visibility 1s, opacity 1s;
  } @else if $type == "show" {
    visibility: visible;
    opacity: 1;
    transition: visibility 1s, opacity 1s;
  }
}

//Position element:
@mixin pos($type: absolute, $args: 0 0 0 0, $trf: 0 0, $unit: "%") {
  position: $type;
  $offsets: top right bottom left;
  @if length($args) == 2 or length($args) == 4 {
    @if length($args) == 2 {
      $args: join($args, $args);
    }
    @each $offset in $offsets {
      $offsetVal: nth($args, index($offsets, $offset));
      #{$offset}: validOffset($offsetVal, $unit);
    }
  } @else {
    @warn "Invalid number of arguments. (Must be either 2 or 4).";
  }
  @if trf != 0 {
    $X: nth($trf, 1);
    $Y: nth($trf, 2);
    //If neither of X and Y is zero
    @if type-of($X) == number and type-of($Y) == number {
      $X: getUnit($X, $unit);
      $Y: getUnit($Y, $unit);
      @if ($X * $Y) !=0 {
        transform: translate($X, $Y);
      } @else if ($X != 0) {
        transform: translateX($X);
      } @else if ($Y != 0) {
        transform: translateY($Y);
      }
    } @else {
      @warn "Invalid value for $trf";
    }
  }
}

@function validOffset($value, $unit: "%") {
  @if type-of($value) == number {
    @if ($value != 0) {
      @return getUnit($value, $unit);
    } @else {
      @return null;
    }
  } @else if str-slice($value, 1, 1) == "f" {
    @return str-slice($value, 2);
  } @else if index(auto initial inherit, $value) {
    @return $value;
  } @else {
    @warn "Invalid offset value.";
    @return null;
  }
}

@mixin abs($args: 0 0 0 0, $trf: 0 0, $unit: "%") {
  @include pos(absolute, $args, $trf, $unit);
}

@mixin rel($args: 0 0 0 0, $trf: 0 0, $unit: "%") {
  @include pos(relative, $args, $trf, $unit);
}

@mixin fix($args: 0 0 0 0, $trf: 0 0, $unit: "%") {
  @include pos(fixed, $args, $trf, $unit);
}

@mixin sticky($args: 0 0 0 0, $trf: 0 0, $unit: "%") {
  @include pos(sticky, $args, $trf, $unit);
}

//endsWith function for strings:
@function str-endsWith($string, $find) {
  @return str-length($string) >= str-length($find) AND
        str-slice($string, (str-length($string) - str-length($find) + 1)) == $find;
}

//reverse strings:
@function str-reverse($string) {
  $reverse-string: "";
  @for $i from 1 through str-length($string) {
    $c: str-slice($string, $i, $i);
    $reverse-string: "#{$c}#{$reverse-string}";
  }
  @return $reverse-string;
}

//split strings on separator:
@function str-split($string, $separator) {
  $i: str-index($string, $separator);
  @if $i != null {
    @return append(
        str-slice($string, 1, $i - 1),
        str-split(str-slice($string, $i + str-length($separator)), $separator)
    );
  }
  @return $string;
}

//Add unit to unitless number
@function getUnit($number, $unit) {
  $std_units: "px" "cm" "mm" "%" "in" "em" "rem" "pt" "vw" "vh" "vmin" "vmax";
  $std_unit_values: 1px 1cm 1mm 1% 1in 1em 1rem 1pt 1vw 1vh 1vmin 1vmax;
  @if type-of($number) == number {
    @if not unitless($number) {
      @return $number;
    } @else {
      $index: index($std_units, $unit);
      @if $index {
        @return $number * nth($std_unit_values, $index);
      } @else {
        @warn "Unknown unit `#{$unit}`.";
        @return $number;
      }
    }
  } @else {
    @warn "Invalid type.";
    @return $number;
  }
}

//Transition:
@mixin transition($prop, $time, $easing: $ease1, $delay: 0s) {
  $transition: ();
  @for $i from 1 through length($prop) {
    @for $j from 0 to (length($prop)) - (length($time)) {
      $time: join($time, nth($time, -1));
    }
    @for $j from 0 to (length($prop)) - (length($easing)) {
      $easing: join($easing, nth($easing, -1));
    }
    @for $j from 0 to (length($prop)) - (length($delay)) {
      $delay: join($delay, nth($delay, -1));
    }

    $transition: append(
        $transition,
          (nth($prop, $i) nth($time, $i) nth($easing, $i) nth($delay, $i)),
      $separator: comma
    );
  }
  transition: $transition;
}

//Selector for styling on parent hover:
@mixin nthParentHover($n: 1, $focus_active: false) {
  $rootString: str-reverse(#{&});
  $parentIndex: str-index($rootString, " ");
  $parent: str_slice($rootString, 0, $parentIndex - 1);
  $children: str_slice($rootString, $parentIndex);

  @if $focus_active {
    @at-root #{$parent}:hover #{$children},
    #{$parent}:focus #{$children},
    #{$parent}:active #{$children} {
      @content;
    }
  } @else {
    @at-root #{$parent}:hover #{$children} {
      @content;
    }
  }
}

@mixin font-serif($name, $size: false, $weight: false, $color: false, $style: false, $lh: false) {
  font-family: $name, "Times New Roman", Times, serif;
  @if $size {
    @include font-size($size);
  }
  @if $weight {
    font-weight: map-get($font-weights, $weight);
  }
  @if $color {
    color: $color;
  }
  @if $style {
    font-style: $style;
  }
  @if $lh {
    line-height: $lh;
  }
}

@mixin font-sans($name, $size: false, $weight: false, $color: false, $style: false, $lh: false) {
  font-family: $name, Roboto, Helvetica, Arial, sans-serif;
  @if $size {
    @include font-size($size);
  }
  @if $weight {
    font-weight: map-get($font-weights, $weight);
  }
  @if $color {
    color: $color;
  }
  @if $style {
    font-style: $style;
  }
  @if $lh {
    line-height: $lh;
  }
}

@mixin pseudo($display: block, $pos: absolute, $content: '', $width: false, $height: false) {
  content: $content;
  display: $display;
  position: $pos;
  @if $width {
    width: $width;
  }
  @if $height {
    height: $height;
  }
}

@mixin center_item(){
  display: flex;
  justify-content: center;
  align-items: center;
}